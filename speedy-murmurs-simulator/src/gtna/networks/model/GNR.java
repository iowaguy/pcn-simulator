/*
 * ===========================================================
 * GTNA : Graph-Theoretic Network Analyzer
 * ===========================================================
 * 
 * (C) Copyright 2009-2011, by Benjamin Schiller (P2P, TU Darmstadt)
 * and Contributors
 * 
 * Project Info:  http://www.p2p.tu-darmstadt.de/research/gtna/
 * 
 * GTNA is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * GTNA is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 * 
 * ---------------------------------------
 * GNR.java
 * ---------------------------------------
 * (C) Copyright 2009-2011, by Benjamin Schiller (P2P, TU Darmstadt)
 * and Contributors 
 * 
 * Original Author: Benjamin Schiller;
 * Contributors:    -;
 * 
 * Changes since 2011-05-17
 * ---------------------------------------
 */
package gtna.networks.model;

import gtna.graph.Edges;
import gtna.graph.Graph;
import gtna.graph.Node;
import gtna.networks.Network;
import gtna.transformation.Transformation;
import gtna.util.parameter.BooleanParameter;
import gtna.util.parameter.DoubleParameter;
import gtna.util.parameter.Parameter;

import java.util.Random;

/**
 * Implements a network generator for GNR, the Growing Network with
 * Re-direction. This network growth model was introduced by Krapivsky and
 * Redner in their paper "Organization of growing random networks" (2001) and is
 * directly based on the Growing Network model (GN) also described in this
 * publication. In each step, a new node joins the network. A global probability
 * for redirection (PR) is given. With probability 1-PR, the new node simply
 * established a connection to a randomly chosen bootstrap node already in the
 * system. Otherwise (with probability PR), the new node connects to the parent
 * / predecessor of the node in the tree generated by this construction (each
 * node, except the first one, has one outgoing link to a parent and possibly
 * multiple incomming connection from child nodes).
 * 
 * Parameters are a flag for bidirectionality and the redirection probability.
 * If bidirectionality is true, every edge is added in both directions. Note
 * that in the original model, this parameter would be set to false as all
 * connections are unidirectional.
 * 
 * @author benni
 * 
 */
public class GNR extends Network {
	private boolean BIDIRECTIONAL;

	private double REDIRECTION_PROBABILITY;

	public GNR(int nodes, boolean BIDIRECTIONAL,
			double REDIRECTION_PROBABILITY, Transformation[] t) {
		super("GNR", nodes, new Parameter[] {
				new BooleanParameter("BIDIRECTIONAL", BIDIRECTIONAL),
				new DoubleParameter("REDIRECTION_PROBABILITY",
						REDIRECTION_PROBABILITY) }, t);
		this.BIDIRECTIONAL = BIDIRECTIONAL;
		this.REDIRECTION_PROBABILITY = REDIRECTION_PROBABILITY;
	}

	public Graph generate() {
		Graph graph = new Graph(this.getDescription());
		Random rand = new Random(System.currentTimeMillis());
		Node[] nodes = Node.init(this.getNodes(), graph);
		Edges edges = new Edges(nodes, 100);
		for (int i = 1; i < nodes.length; i++) {
			int bootstrap = rand.nextInt(i);
			if (rand.nextDouble() <= this.REDIRECTION_PROBABILITY) {
				boolean found = false;
				for (int j = 0; j < i; j++) {
					if (edges.contains(bootstrap, j)) {
						edges.add(i, j);
						if (this.BIDIRECTIONAL) {
							edges.add(j, i);
						}
						found = true;
						break;
					}
				}
				if (!found) {
					edges.add(i, bootstrap);
					if (this.BIDIRECTIONAL) {
						edges.add(bootstrap, i);
					}
				}
			} else {
				edges.add(i, bootstrap);
				if (this.BIDIRECTIONAL) {
					edges.add(bootstrap, i);
				}
			}
		}
		edges.fill();
		graph.setNodes(nodes);
		return graph;
	}
}
